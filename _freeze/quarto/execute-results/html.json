{
  "hash": "644f65722f0a62230defcd8e8239a85e",
  "result": {
    "engine": "knitr",
    "markdown": "\n# What is literate programming?\n\nLIterate programming produces documents where explanations given in a natural language (such as English) is interspersed with snippets of code.\n\nThis concept was introduced 1984 by Donald Knuth (according to [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming)), and is good practice for `reproducibility and open science`.\n\n# Tools for literate programming\n\nThere are a lot of different tools for literate programming, for example Jupyter notebooks, markdown, or quarto. \n\n![](quarto.png){fig-align=\"center\" height=\"50\"}\n\nYou have already started to work with quarto, so we will have a closer look at that one - plus it makes me happy and I want to spread the joy!\n\n# Quarto\n\n<figure style=\"float: right; margin: 0 0 1em 1em; text-align: center;\">\n  <img src=\"quarto_output.png\" alt=\"Quarto Output\" style=\"height: 400px;\">\n  <figcaption style=\"font-style: italic; font-size: 0.9em;\">image captured at https://quarto.org/</figcaption>\n</figure>\n\nQuarto is open source and you can edit quarto documents in a variety of editors, such as: jupyter notebooks, Visual Studio Code (more joy here, by the way), Rstudio or really any text editor.  \n\nYou can use a variety of language in your quarto documents - bash, R, Python, Julia, etc. \n\nAnd last but not least you can produce a variety of output formats, such as websites (like this tutorial,) articles, presentations (like this mornings' presentation), books, dashboards. \n\n<div style=\"clear: both;\"></div>\n\n# Basic syntax\n\nBased on this tutorial [here](https://quarto.org/docs/get-started/hello/rstudio.html).\n\n## YAML header\n\n\n\n```{.default}\n---\ntitle: \"Hello, Quarto\"\nformat: html\neditor: visual\n---\n```\n\n\nThe YAML header resides at the top of the document, but is optional. It is marked by three dashes on either end and follows the basic YAML syntax, using key-value pairs `key: value`. \n\nCommon fields in the header are `title, author, subtitle, date`, as well as customizable fields such as `theme, fontcolor`. \n\n[Here](https://quarto.org/docs/reference/formats/html.html) you can find the fields that are available in quarto for HTML documents. \n\n## Code Chunks\n\n\n\n````{.default}\n```{.r}\n#| label: load-packages\n#| include: false\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n````\n\n\nCan be added anywhere in the document (apart from the header). Different chunks in the same document can execute different languages. The language is identified by the curly brackets at the beginning. \n\nOptional code chunk options are listed below and are identified by `#|`.\n\nIn RStudio you can either render the entire document, or individual chunks. \n\n## Markdown Text\n\nFormated text between the code chunks with \n\n- section headers (`#, ##, ###`)\n- hyperlinks (`[in-line text](web-address)`)\n- embedded images\n- inline code chunks\n- and more\n\nThis text is there to help you and others. It can explain why you do certain things with your data, can describe results, make comments, tell a story...\n\n## how it works\n\n![](rstudio-qmd-how-it-works.png){fig-align=\"center\" height=\"120\"}\n\nWhen you render the document, knitr executes all of the code chunks and creates a new markdown, which includes code and output, as well as the text. Then, pandoc takes this .md file and creates the final output. \n\n# Let's try it out!\n\nIn the following tutorial you can practice what we have done so far and spruce up your code with some literate programming and other nice quarto features. \n\nI want you to work on the code you have worked on before - Tuesday or Wednesday, you can choose. \n\nMake changes, commit them and push them to your remote repository. Do one commit for each of the following:\n\n# 1. Quarto theme\n\nChange the theme of your file - read up on Quarto themes and apply one you like.\n\n# 2. Literate programming\n\nAre you sure you are using the full potential of quarto's literate programming capabilities?\n\nMake sure you have text for all your images, comments that explain what the code is doing...\n\n# 3. ggplot colors\n\nChange the colors of one of your images. \n\n\n# relevant resources\n\n## quarto\n\n[Quarto documentation](https://quarto.org/)\n\n## color in illustrations\n\n[Better plots](https://better-plots.netlify.app/)\n\n[Chapter on Highlighting in Plots](https://better-plots.netlify.app/04-highlighting.html)\n\n[Practical Rules for Using Color in Charts](http://www.perceptualedge.com/articles/visual_business_intelligence/rules_for_using_color.pdf)\n\n\n\n\n\n### if you do not have code\n\nyou can use the one below:\n\n\n````{.default}\n---\ntitle: \"ggplot2 demo\"\nauthor: \"Norah Jones\"\ndate: \"5/22/2021\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 4\n    code-fold: true\n---\n\n## Air Quality\n\n@fig-airquality further explores the impact of temperature on ozone level.\n\n```{r}\n#| label: fig-airquality\n#| fig-cap: \"Temperature and ozone level.\"\n#| warning: false\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n\n````",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}