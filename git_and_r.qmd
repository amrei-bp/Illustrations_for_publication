
Now we have changed files and committed those changes on Github, but the plan is to work on our code locally on our computer (just as we are used to) and to use git/Github to track our work. 

We will follow the Data carpentries tutorial here: https://datacarpentry.org/rr-version-control/03-git-in-rstudio/

# Basic git workflow

Remember the basic git workflow?

<img src="git_diagram.png" alt="alt text" width="500" />

# In this tutorial 

We already created our git repository on Github. 

Now we will:


- clone the contents of the remote repository to our local computer
- change, stage and commit
- push changes to the remote repository

So, let's try this out!


# Clone the repository to RStudio

Now you have a repository in your github account, but you want to work locally on your computer. You need to clone the repository to your local environment.

- On GitHub, navigate to the `Code tab` of the repository.
- On the right side of the screen, click `Code`, ``local` and `ssh`.
- Click the `Copy to clipboard` icon to the right of the repository URL.
- `Open RStudio` on your local environment.
- Click `File, New Project, Version Control, Git`.
- `Paste the repository URL` into the appropriate field and `browse to the desired directory` for your R project. 
- Click `Create Project`.

Now you have the contents of your repository locally in Rstudio. 


## Look at the git tab in Rstudio

Can you find the commit history?


# Add files to the repository

There are different ways to do this: 

## via Rstudio

- in Rstudio, in the lower right corner, click on the `plus documents`button in the `Files`tab
- specify the type of document and the name

## via copy-paste

- copy the file you have already been working on into the Rstudio project directory
- they will appear in the lower right in Rstudio

# make changes

Now you can make changes to the files as you wish. 

# Stage the changes

Stage your changes to be committed.

- Go to the `Git tab` in RStudio.
- Stage the changes for the files you changed by `checking the boxes` next to then

# .gitignore

There are maybe some files in your working directory that you do not want to have version controlled on git. This might be for several different reasons, such as: 

- they contain sensitive information and the repository is public
- it's raw data; github is NOT a storage space for data
- they are intermediate files generated by the run

Here, we will generate a .Rproj file, that we do not want to track on git. You can tell git to ignore those files by adding them to the .gitignore file: 

- add `*.Rproj` to the `.gitignore` file and save it. 

The files will disappear from the git tab in Rstudio. 


# Commit

- Click `commit`, and a new window will appear. 

Now you can review your staged changes. If you are satisfied commit your changes, with a commit message.

In the pop-up window view the diff for the files.
Enter an informative commit message, like “Changed analysis year to X”, and hit Commit.


# Push

Now you have the changes saved and tracked on your local computer. But you want to on github too!

 click in the green upward arrow button to push your changes to your GitHub repository.

When using git push always means pushing commits from your local respository (your computer) to a remote repository (GitHub).

Enter login information as needed.

# notes on the exercise

We have now done the staging and committing in two different ways, once directly on Github, and once with Rstudio. Of course it is also possible to use git via the command line in the terminal. 

Further reading and exercises on how to use git on the command line: https://uppsala.instructure.com/courses/96483/pages/git-1-introduction?module_item_id=1027800



# Extra: Fork a repository that is not yours

Sometimes you might want to change someone elses data, or work together with them on some code. For this you do not work on the exact same code, but you make yourself a copy - you fork the project on github. A fork is a new repository that shares code and visibility settings with the original “upstream” repository.

- To fork a repository you navigate to the repository you want to fork
- Then you click on `Fork` (on the top right corner)
- Then you click on `create fork`

Now you have a copy in your github account, and can continue with cloning it to your local computer. 

# Extra: Pull request

Once you have worked on your version of the code and are ready to show it to your collaborators on Github you can make a pull request. A pull request suggests you changes to the owner of the upstream repository and ask them to "pull" your changes into their repository. 

- On GitHub, navigate to the `Pull request tab` at the top.
- `New pull request`
- At the top, choose from which repository and branch, to which repository and branch the data should be merged.
- `Create pull request` and describe what you have been doing.
- wait for feedback

The owner of the upstream repository will now get a message that a pull request has been made. They review the changes, might write comments for you to respond to, or might merge your changes to the branch.


# Extra: Sync your remote repository

Once the pull request is merged sync your remote main with the upstream repository, and pull these changes to your local repository.


And here is how the full process looks like: 
<img src="git-github-workflow_amrei.png" alt="alt text" width="800" />

